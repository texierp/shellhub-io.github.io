{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ShellHub is a modern SSH server for remotely accessing Linux devices via command line (using any SSH client) or web-based user interface. It is intended to be used instead of sshd . Typically, if you want to SSH a Linux device on a local network, you just need to know its IP address. However, in order to access a Linux device from outside the local network, you will have to go through a few inconveniences, such as getting its public IP address and configuring the router. Changing the VPN/firewall configuration can be cumbersome if the device is behind a corporate firewall that does not allow SSH connections. ShellHub provides a way to avoid all these hassles, helping you easily and seamlessly access any Linux device behind firewall and NAT.","title":"What is ShellHub?"},{"location":"faq/","text":"Frequently Asked Questions \u00b6 How can I get the SSHID from my device? \u00b6 From your device execute the following command on your shell: docker exec shellhub agent info this returns your device's SSHID inside a json example \u00b6 { \"sshid\": \"namespace.device_name@address\" }","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"faq/#how-can-i-get-the-sshid-from-my-device","text":"From your device execute the following command on your shell: docker exec shellhub agent info this returns your device's SSHID inside a json","title":"How can I get the SSHID from my device?"},{"location":"faq/#example","text":"{ \"sshid\": \"namespace.device_name@address\" }","title":"example"},{"location":"installing/","text":"This tutorial will guide you through the steps needed to install and run ShellHub. If you are looking for instructions on how to set up ShellHub for your device fleet on your cloud infrastructure the same steps apply. ShellHub is designed using the microservices design pattern, so that multiple small and isolated services collaborate to provide the server. In order to make it easier to test ShellHub and its features, we have created a Docker Compose environment that brings all of these components up and connects them together on a single machine. Before continuing, make sure you have installed Docker Engine and Docker Compose In a working directory, clone the ShellHub repository: git clone -b v0.2.1 https://github.com/shellhub-io/shellhub.git shellhub-v0.2.1 cd shellhub-v0.2.1 Generate keys \u00b6 It is required to generate a key pair (private and public) for your ShellHub server instance. ./bin/keygen Running \u00b6 docker-compose up -d Be patient, it can take up to 10 minutes for the first time When ShellHub server is up and running, you access the Web UI on http://localhost . Next steps \u00b6 Adding account for creating the initial user Registering a device for registering your first device Connecting to a device for connecting to your device","title":"Installing"},{"location":"installing/#generate-keys","text":"It is required to generate a key pair (private and public) for your ShellHub server instance. ./bin/keygen","title":"Generate keys"},{"location":"installing/#running","text":"docker-compose up -d Be patient, it can take up to 10 minutes for the first time When ShellHub server is up and running, you access the Web UI on http://localhost .","title":"Running"},{"location":"installing/#next-steps","text":"Adding account for creating the initial user Registering a device for registering your first device Connecting to a device for connecting to your device","title":"Next steps"},{"location":"introduction/","text":"This introduction section is intended to give a high-level overview of the ShellHub. There are few basic concepts that are important to understand the ShellHub. Those basic concepts are detailed below: SSH gateway \u00b6 The SSH gateway is a modern SSH server which forward connections to the devices running ShellHub's agent. Device \u00b6 An internet-connected device, such as a computer or something more specific like a single-board computer, running ShellHub's agent. Agent \u00b6 ShellHub's agent which must be installed on the device. SSHID \u00b6 SSHID is a unique address to identify a device in the SSH gateway, which must be specified in the following format: <NAMESPACE>.<DEVICE_NAME>@<GATEWAY_ADDRESS> Where: <NAMESPACE> : Is the account namespace identifier <DEVICE_NAME> : Is the device name identifier <GATEWAY_ADDRESS> : Is the gateway address identifier Example of SSHID: lab.rasp-1@localhost","title":"Overview"},{"location":"introduction/#ssh-gateway","text":"The SSH gateway is a modern SSH server which forward connections to the devices running ShellHub's agent.","title":"SSH gateway"},{"location":"introduction/#device","text":"An internet-connected device, such as a computer or something more specific like a single-board computer, running ShellHub's agent.","title":"Device"},{"location":"introduction/#agent","text":"ShellHub's agent which must be installed on the device.","title":"Agent"},{"location":"introduction/#sshid","text":"SSHID is a unique address to identify a device in the SSH gateway, which must be specified in the following format: <NAMESPACE>.<DEVICE_NAME>@<GATEWAY_ADDRESS> Where: <NAMESPACE> : Is the account namespace identifier <DEVICE_NAME> : Is the device name identifier <GATEWAY_ADDRESS> : Is the gateway address identifier Example of SSHID: lab.rasp-1@localhost","title":"SSHID"},{"location":"troubleshooting/","text":"If you're having trouble with ShellHub, here are some fixes you can try: Cannot start service ssh \u00b6 Error message ERROR: for shellhub_ssh_1 Cannot start service ssh: driver failed programming external connectivity on endpoint shellhub_ssh_1: Error starting userland proxy: listen tcp 0.0.0.0:22: bind: address already in use If you have getting the error message above when starting up the server using docker-compose you have two options to solve this issue: Change the OpenSSH daemon port from 22 to whatever on your host machine; Change the default SSH gateway port of ShellHub by setting SHELLHUB_SSH_PORT variable inside the configuration file. Cannot start gateway \u00b6 Erro message ERROR: for gateway Cannot start service gateway: driver failed programming external connectivity on endpoint shellhub_gateway_1: Error starting userland proxy: listen tcp 0.0.0.0:80: listen: address already in use If you get the error message above, then check you have no other running process using the port 80 with the following command: sudo lsof -i -P -n | grep :80 If so, kill the service, for example, if apache2 is running: sudo systemctl stop apache2 And disable it from autostart: sudo update-rc.d apache2 disable","title":"Troubleshooting"},{"location":"troubleshooting/#cannot-start-service-ssh","text":"Error message ERROR: for shellhub_ssh_1 Cannot start service ssh: driver failed programming external connectivity on endpoint shellhub_ssh_1: Error starting userland proxy: listen tcp 0.0.0.0:22: bind: address already in use If you have getting the error message above when starting up the server using docker-compose you have two options to solve this issue: Change the OpenSSH daemon port from 22 to whatever on your host machine; Change the default SSH gateway port of ShellHub by setting SHELLHUB_SSH_PORT variable inside the configuration file.","title":"Cannot start service ssh"},{"location":"troubleshooting/#cannot-start-gateway","text":"Erro message ERROR: for gateway Cannot start service gateway: driver failed programming external connectivity on endpoint shellhub_gateway_1: Error starting userland proxy: listen tcp 0.0.0.0:80: listen: address already in use If you get the error message above, then check you have no other running process using the port 80 with the following command: sudo lsof -i -P -n | grep :80 If so, kill the service, for example, if apache2 is running: sudo systemctl stop apache2 And disable it from autostart: sudo update-rc.d apache2 disable","title":"Cannot start gateway"},{"location":"welcome/","text":"The ShellHub is composed of two major parts, the SSH gateway and the device agent . These parts work together to provide a secure SSH connection across the network to Linux-based devices. SSH gateway \u00b6 The ShellHub SSH gateway is a modern SSH server built using the microservices design pattern, meaning that multiple small, isolated services make up the server. It must be installed on any cloud provider like Azure, Google, AWS or DigitalOcean. Device agent \u00b6 The ShellHub device agent which must be installed on the device.","title":"Welcome"},{"location":"welcome/#ssh-gateway","text":"The ShellHub SSH gateway is a modern SSH server built using the microservices design pattern, meaning that multiple small, isolated services make up the server. It must be installed on any cloud provider like Azure, Google, AWS or DigitalOcean.","title":"SSH gateway"},{"location":"welcome/#device-agent","text":"The ShellHub device agent which must be installed on the device.","title":"Device agent"},{"location":"guides/adding-account/","text":"The web interface requires you log in with a valid username and password. Before continuing, make sure you have installed uuidgen To add a user account, you must run the add-user script from the ShellHub working directory: ./bin/add-user <username> <password> In ShellHub, each account manage their own fleet of devices. Thus, devices registered in one account belongs to their specific namespace and are not available in other accounts.","title":"Adding account"},{"location":"guides/connecting-device/","text":"ShellHub provides different connection methods: Web-based SSH client within the ShellHub UI (Chrome, Firefox) Traditional command line SSH client (Linux, Mac OS X) Any GUI SSH client like PuTTY (Windows) Open the ShellHub UI and login using a valid account credentials. Once you are logged in, navigate Devices on the sidebar and follow instructions for a supported connection method: Web-based SSH client \u00b6 In the Devices page, choose the device you wish to connect to and click on terminal icon at the row. A dialog will pop up prompting you for the username and password of an existing user on the device's operating system. After providing credentials, click on Connect button. Command line SSH client \u00b6 To connect to your device using a command line SSH client, you need to know its SSHID address. In the Devices page, choose the device you want to connect to and copy the device's SSHID address. Then, run the following command on your terminal: ssh <USER>@<SSHID> Make sure to replace <USER> with the existing user on the device's operating system and <SSHID> with the SSHID copied before. PuTTY GUI SSH client \u00b6 Connecting to your device using a GUI SSH client also requires its SSHID address. In the Devices page, choose the device you want to connect to and copy the device's SSHID address. Open Putty and fill in with the following information: Host Name (or IP address): <USER> @ <SSHID> Port: 22 Connection type: SSH Make sure to replace <USER> with the existing user on the device's operating system and <SSHID> with the SSHID copied before.","title":"Connecting to a device"},{"location":"guides/connecting-device/#web-based-ssh-client","text":"In the Devices page, choose the device you wish to connect to and click on terminal icon at the row. A dialog will pop up prompting you for the username and password of an existing user on the device's operating system. After providing credentials, click on Connect button.","title":"Web-based SSH client"},{"location":"guides/connecting-device/#command-line-ssh-client","text":"To connect to your device using a command line SSH client, you need to know its SSHID address. In the Devices page, choose the device you want to connect to and copy the device's SSHID address. Then, run the following command on your terminal: ssh <USER>@<SSHID> Make sure to replace <USER> with the existing user on the device's operating system and <SSHID> with the SSHID copied before.","title":"Command line SSH client"},{"location":"guides/connecting-device/#putty-gui-ssh-client","text":"Connecting to your device using a GUI SSH client also requires its SSHID address. In the Devices page, choose the device you want to connect to and copy the device's SSHID address. Open Putty and fill in with the following information: Host Name (or IP address): <USER> @ <SSHID> Port: 22 Connection type: SSH Make sure to replace <USER> with the existing user on the device's operating system and <SSHID> with the SSHID copied before.","title":"PuTTY GUI SSH client"},{"location":"guides/registering-device/","text":"In order to register a device on ShellHub, you need to install ShellHub agent onto it. The easiest way to install ShellHub agent is with our automatic one-line installation script, which works with all Linux distributions that have Docker installed and properly set up. The other way to install ShellHub agent is build it from the source code by yourself or if you are targeting embedded devices checkout our Yocto Project support layer for ShellHub . One-line installation script (Docker) \u00b6 Open the ShellHub UI, navigate to Devices on the sidebar, and click on ADD DEVICE . It should give you a registration command that you can run on your device: After your device is enrolled, it becomes available in Devices page.","title":"Registering a device"},{"location":"guides/registering-device/#one-line-installation-script-docker","text":"Open the ShellHub UI, navigate to Devices on the sidebar, and click on ADD DEVICE . It should give you a registration command that you can run on your device: After your device is enrolled, it becomes available in Devices page.","title":"One-line installation script (Docker)"}]}